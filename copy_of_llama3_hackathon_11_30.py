# -*- coding: utf-8 -*-
"""Copy_of_llama3_hackathon_11-30.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1luWqvIrYE8g9fGWzRVVEfI5YQojQZfWj

# llama3-hackathon
"""

! pip install llama-index
! pip install pydantic
! pip install groq
! pip install llama-index-llms-groq
! pip install substrate
! pip install yfinance
! pip install pandas

!pip install llama_index.llms.together

from llama_index.llms.together import TogetherLLM
from llama_index.core.tools import FunctionTool
from llama_index.core.agent import ReActAgent
from llama_index.llms.groq import Groq
# from google.colab import userdata

from llama_index.core.llms import ChatMessage, MessageRole

import yfinance as yf
from typing import Annotated, Callable, Any, Optional
from pandas import DataFrame
from functools import wraps

# Set up the Groq class with the required model and API key
llm = Groq(model="llama3-8b-8192", api_key="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")

# LLM used for
llm3 = TogetherLLM(
    model="meta-llama/Meta-Llama-3-8B-Instruct-Lite", api_key="d0ca8bc44aac868cafe8e100a0e3698183000c8562dc76a286cb96f1b9d8cdc6"
)

from llama_index.core import PromptTemplate

# Utility function for saving output
def save_output(data: DataFrame, description: str, save_path: Optional[str] = None) -> None:
    if save_path:
        data.to_csv(save_path)
        print(f"{description} saved to {save_path}")

def get_stock_data(symbol: str, start_date: str, end_date: str) -> str:
    # Fetch stock data from Yahoo Finance
    ticker = yf.Ticker(symbol)
    stock_data = ticker.history(start=start_date, end=end_date).describe()
    #save_output(stock_data, f"Stock data for {ticker.ticker}", save_path)
    return stock_data.to_string()

def get_analyst_recommendations(symbol: str) -> str:
    # Fetch analyst recommendations from Yahoo Finance
    ticker = yf.Ticker(symbol)
    recommendations = ticker.recommendations
    if recommendations.empty:
        return "No recommendations available"

    recommendation_counts = recommendations[['strongBuy', 'buy', 'hold', 'sell', 'strongSell']].sum()
    most_common_recommendation = recommendation_counts.idxmax()
    count = recommendation_counts.max()

    return f"Most common recommendation: {most_common_recommendation} ({count} votes)"


def get_balance_sheet(symbol: str, ) -> str:
    # Fetch balance sheet from Yahoo Finance
    ticker = yf.Ticker(symbol)
    balance_sheet = ticker.balance_sheet

    # Prompt template for summarizing financial data
    template_financial_summary = """You are a financial analyst. Provide an overview of the balance sheet. Summarize the following sections like assets, liabilities, shareholders equities,  company’s financial position, focusing on liquidity, solvency, and overall financial health in 3 lines..\n\n{balance_sheet}"""

    prompt_balance_sheet = PromptTemplate(template=template_financial_summary)

    # Use Llama Index with chosen LLM model
    result_summary = llm.complete(prompt_balance_sheet.format(balance_sheet=balance_sheet))

    return result_summary.text


def get_stock_info(symbol: str, ) -> str:
    # Fetch stock information from Yahoo Finance
    ticker = yf.Ticker(symbol)
    info = ticker.info

    stock_info = str(info)

  # Prompt template for summarizing financial data
    template_stock_prices = """You are a financial analyst. Provide an overview of the stock. Summarize the following sections like basic information, pricing data, volume data, dividends, financial ratio, analyst recommendations delineating stock performance, including notable trends and potential risks in 3 lines..\n\n{stock_info}"""

    prompt_stock_proces = PromptTemplate(template=template_stock_prices)

    # Use Llama Index with chosen LLM model
    result_summary = llm.complete(prompt_stock_proces.format(stock_info=stock_info))

    return result_summary.text

def get_company_info(symbol: str ) -> str:
    # Fetch company information from Yahoo Finance
    ticker = yf.Ticker(symbol)
    info = ticker.info
    company_info = {
        "Company Name": info.get("shortName", "N/A"),
        "Industry": info.get("industry", "N/A"),
        "Sector": info.get("sector", "N/A"),
        "Country": info.get("country", "N/A"),
        "Website": info.get("website", "N/A"),
    }
    company_info_df = DataFrame([company_info])

    company_info = str(company_info_df)

    # Prompt template for summarizing financial data
    template_company_info = """You are a financial analyst. Provide an overview of the company. Summarize the following sections like Company Profile, Financial Overview, Stock Performance, Key Financial Ratios and Recent News and Developments delineating  overall financial health, market position, and investment potential in 3 lines..\n\n{company_info}"""

    prompt_company_info = PromptTemplate(template=template_company_info)

    # Use Llama Index with chosen LLM model
    result_summary = llm.complete(prompt_company_info.format(company_info= company_info))

    return result_summary.text


def get_income_stmt(symbol: str, ) -> str:
  # Fetch income statement from Yahoo Finance
    ticker = yf.Ticker(symbol)
    income_stmt = ticker.financials

    income_stmt = income_stmt.to_string()

    # Prompt template for summarizing financial data
    template_income_stmt = """You are a financial analyst. Provide an overview of the income statement. Summarize the following sections like Revenue, Cost of Goods Sold (COGS), Operating Expenses, Operating Income and Non-Operating Income and Expenses and income which higlights financial performance, including key trends and profitability in 3 lines..\n\n{income_stmt}"""
    prompt_income_stmt = PromptTemplate(template=template_income_stmt)
    # Use Llama Index with chosen LLM model
    result_summary = llm.complete(prompt_income_stmt.format(income_stmt= income_stmt))
    return result_summary.text


def get_cash_flow(symbol: str, ) -> str:
    # Fetch cash flow from Yahoo Finance
    ticker = yf.Ticker(symbol)
    cash_flows = ticker.cashflow
    cash_flows = cash_flows.to_string()


  # Prompt template for summarizing financial data
    template_cash_flows_template = """You are a financial analyst. Provide an overview of the income statement. Summarize the following sections like Cash Flows from Operating Activities, Cash Flows from Investing Activities, Cash Flows from Financing Activities, Net Increase (Decrease) in Cash and Cash Equivalent delineatimg cash flow performance, focusing on liquidity, cash generation, and alignment with the company’s financial strategy in 3 lines..\n\n{cash_flows}"""
    prompt_cash_flows = PromptTemplate(template=template_cash_flows_template)

    # Use Llama Index with chosen LLM model
    result_summary = llm.complete(prompt_cash_flows.format(cash_flows=cash_flows))

    return result_summary.text

def get_stock_dividends(symbol: str ) -> str:
    # Fetch stock dividends from Yahoo Finance
    ticker = yf.Ticker(symbol)
    dividends = ticker.dividends
    dividends_info = dividends.to_string()

    # Prompt template for summarizing financial data
    template_dividends_info = """You are a financial analyst. Your task is to summarize the key trend and statistical values of dividend in not more than 3 lines.\n\n{dividends_info}"""

    prompt_dividends_info  = PromptTemplate(template=template_dividends_info)

    # Use Llama Index with chosen LLM model
    result_summary = llm.complete(prompt_dividends_info.format(dividends_info=dividends_info))

    return result_summary.text

print(type(get_stock_dividends('MSFT')))

# Define tools for each function
get_stock_data_tool = FunctionTool.from_defaults(fn=get_stock_data, name="stock_data", description="Fetches stock historical data which is  a comprehensive record of a company's stock price movements over time. This data provides a detailed view of the stock's performance and includes various key metrics such as open price, close price, high price, low price, volume and adjusted close price")
get_stock_info_tool = FunctionTool.from_defaults(fn=get_stock_info,  name="stock_information", description="Stock information from yfinance includes key data such as current price, market cap, volume, financial ratios, dividend yield, and analyst ratings, along with historical price and volume data. This comprehensive snapshot helps investors assess the stock's performance and make informed decisions.")
get_company_info_tool = FunctionTool.from_defaults(fn=get_company_info, name="company_information", description="Company information available in yfinance includes details such as market capitalization, sector, industry, full and short names, website, and financial metrics like revenue, net income, and total debt. This data provides a thorough overview of the company's financial health and market position.")
get_stock_dividends_tool = FunctionTool.from_defaults(fn=get_stock_dividends, name="stock_dividend", description="The stock_dividends data in yfinance includes information on dividend payments such as dividend dates, amounts, and yields. It provides details on past and upcoming dividends, helping investors assess the income potential from their investments.")
get_income_stmt_tool = FunctionTool.from_defaults(fn=get_income_stmt, name="income_statements", description="The income_statements data in yfinance includes detailed financial performance metrics such as revenue, gross profit, operating expenses, net income, and earnings per share (EPS). This data helps investors evaluate a company's profitability and financial health over specific reporting periods.")
get_balance_sheet_tool = FunctionTool.from_defaults(fn=get_balance_sheet, name="balance_sheet", description="The balance sheet data in yfinance includes detailed information on a company's assets, liabilities, and shareholders' equity. This data provides a snapshot of the company's financial position, helping investors assess its stability and financial health.")
get_cash_flow_tool = FunctionTool.from_defaults(fn=get_cash_flow, name="cash_flow", description="The cash flow statements in yfinance provide detailed information on a company's cash inflows and outflows from operating, investing, and financing activities. This data helps investors understand the company's liquidity, cash management, and overall financial flexibility.")
get_analyst_recommendations_tool = FunctionTool.from_defaults(fn=get_analyst_recommendations, name="analyst_recommendation", description="Displays sell and buy decisions made by analyst")


GPT_FINANCIAL_ANALYST_SYS_STR = react_system_header_str = """
You are a Financial Analyst. Assist users with financial analysis, investment advice, budgeting, market analysis, and financial planning.

1) Financial Analysis: Analyze financial statements, ratios, performance.
2) Investment Analysis: Provide stock/bond insights, risk/return analysis, valuations, portfolio advice.
3) Budgeting and Forecasting: Assist with budgets, forecasting, variance analysis.
4) Market Analysis: Market research, economic trends, competitive analysis.
5) Financial Planning: Personal financial planning, debt management, goal setting.


## Tools
You have access to a wide variety of tools. You are responsible for using
the tools in any sequence you deem appropriate to complete the task at hand.
This may require breaking the task into subtasks and using different tools
to complete each subtask

## Output Format
To answer the question, please use the following format.

```
Thought: I need to use a tool to help me answer the question.
Action: tool name (one of {tool_names}) if using a tool.
Action Input: the input to the tool, in a JSON format representing the kwargs (e.g. {{"input": "hello world", "num_beams": 5}})
```

Please ALWAYS start with a Thought.

Please use a valid JSON format for the Action Input. Do NOT do this {{'input': 'hello world', 'num_beams': 5}}.

If this format is used, the user will respond in the following format:

```
Observation: tool response
```

You should keep repeating the above format until you have enough information
to answer the question without using any more tools. At that point, you MUST respond
in the one of the following two formats:

```
Thought: I can answer without using any more tools.
Answer: [your answer here]
```

```
Thought: I cannot answer the question with the provided tools.
Answer: Sorry, I cannot answer your query.
```

You should not respond to personal questions or any questions that are not related to financial analysis.
to answer such questions, you MUST respond
in the following format:

```
Thought: I cannot answer the question with the provided tools.
Answer: Sorry, I cannot answer your query.
```

Guidelines:
- Stick to financial analysis.Anthing whoch is not financial analysis will be ignored.
- Limit tool output to 800 tokens.
- Use appropriate financial terminology.
- Provide clear, concise, and comprehensive responses.
- Base advice on sound principles and current market conditions.

Before final response, I want you to think through is that the response generated is correct and elaborate on your reasoning before you give the final answer

"""


prefix_msgs = [ChatMessage(role=MessageRole.SYSTEM, content=GPT_FINANCIAL_ANALYST_SYS_STR)]


aa = ReActAgent.from_tools(
    [
        get_stock_data_tool,
        get_stock_info_tool,
        get_company_info_tool,
        get_stock_dividends_tool,
        get_income_stmt_tool,
        get_balance_sheet_tool,
        get_cash_flow_tool,
        get_analyst_recommendations_tool
    ],
    llm=llm3,
    prefix_messages=prefix_msgs,
    token_counting=True,
    verbose=True,
    max_iterations=20,
)

#Would you reccomend to buy Microsoft?

#

# @markdown ---
# @markdown ### Enter a Financial Query:
query = "Would you reccomend to buy Microsoft?"  # @param {type:"string"}
aa.reset()
response = aa.chat(query)
print(response)



api_key="apik_tMzRgPeGtRkF9fSWW8vSr0baSgz6wbRU"
if api_key is None:
    raise EnvironmentError("No SUBSTRATE_API_KEY set")

from substrate import Substrate, ComputeText, sb

substrate = Substrate(api_key=api_key, timeout=60 * 5)

story = ComputeText(prompt="tell me a story",    model="Llama3Instruct8B")
summary = ComputeText(prompt=sb.concat("Summarize this story: ", story.future.text),    model="Llama3Instruct8B")
response = substrate.run(story)

story_out = response.get(story)
print(story_out.text)