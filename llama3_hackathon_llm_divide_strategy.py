# -*- coding: utf-8 -*-
"""llama3-hackathon_llm_divide_strategy

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J_DUS4TgDVpa6RkuycEiZdKnfphqaAAw

# llama3-hackathon
"""



! pip install llama-index
! pip install pydantic
! pip install groq
! pip install llama-index-llms-groq
! pip install substrate
! pip install yfinance
! pip install pandas

from llama_index.core.tools import FunctionTool
from llama_index.core.agent import ReActAgent
from llama_index.llms.groq import Groq
from google.colab import userdata

from llama_index.core.llms import ChatMessage, MessageRole

import yfinance as yf
from typing import Annotated, Callable, Any, Optional
from pandas import DataFrame
from functools import wraps

# Utility function for saving output
def save_output(data: DataFrame, description: str, save_path: Optional[str] = None) -> None:
    if save_path:
        data.to_csv(save_path)
        print(f"{description} saved to {save_path}")

def get_stock_data(symbol: str, start_date: str, end_date: str, save_path: Optional[str] = None) -> str:
    # Fetch stock data from Yahoo Finance
    ticker = yf.Ticker(symbol)
    stock_data = ticker.history(start=start_date, end=end_date).describe()
    save_output(stock_data, f"Stock data for {ticker.ticker}", save_path)
    return stock_data.to_string()

'''
def get_stock_info(symbol: str) -> str:
    # Fetch stock information from Yahoo Finance
    ticker = yf.Ticker(symbol)
    info = ticker.info
    return str(info)

def get_company_info(symbol: str, save_path: Optional[str] = None) -> str:
    # Fetch company information from Yahoo Finance
    ticker = yf.Ticker(symbol)
    info = ticker.info
    company_info = {
        "Company Name": info.get("shortName", "N/A"),
        "Industry": info.get("industry", "N/A"),
        "Sector": info.get("sector", "N/A"),
        "Country": info.get("country", "N/A"),
        "Website": info.get("website", "N/A"),
    }
    company_info_df = DataFrame([company_info])
    if save_path:
        company_info_df.to_csv(save_path)
        print(f"Company info for {ticker.ticker} saved to {save_path}")
    return company_info_df.to_string()

def get_stock_dividends(symbol: str, save_path: Optional[str] = None) -> str:
    # Fetch stock dividends from Yahoo Finance
    ticker = yf.Ticker(symbol)
    dividends = ticker.dividends
    if save_path:
        dividends.to_csv(save_path)
        print(f"Dividends for {ticker.ticker} saved to {save_path}")
    return dividends.to_string()

def get_income_stmt(symbol: str) -> str:
    # Fetch income statement from Yahoo Finance
    ticker = yf.Ticker(symbol)
    income_stmt = ticker.financials
    return income_stmt.to_string()

def get_balance_sheet(symbol: str) -> str:
    # Fetch balance sheet from Yahoo Finance
    ticker = yf.Ticker(symbol)
    balance_sheet = ticker.balance_sheet
    return balance_sheet.to_string()

def get_cash_flow(symbol: str) -> str:
    # Fetch cash flow from Yahoo Finance
    ticker = yf.Ticker(symbol)
    cash_flow = ticker.cashflow
    return cash_flow.to_string()
'''
def get_analyst_recommendations(symbol: str) -> str:
    # Fetch analyst recommendations from Yahoo Finance
    ticker = yf.Ticker(symbol)
    recommendations = ticker.recommendations
    if recommendations.empty:
        return "No recommendations available"

    recommendation_counts = recommendations[['strongBuy', 'buy', 'hold', 'sell', 'strongSell']].sum()
    most_common_recommendation = recommendation_counts.idxmax()
    count = recommendation_counts.max()

    return f"Most common recommendation: {most_common_recommendation} ({count} votes)"



# Set up the Groq class with the required model and API key
llm = Groq(model="llama3-8b-8192", api_key="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")

!pip install llama_index.llms.together

from llama_index.llms.together import TogetherLLM


llm3 = TogetherLLM(
    model="meta-llama/Meta-Llama-3-8B-Instruct-Lite", api_key="d0ca8bc44aac868cafe8e100a0e3698183000c8562dc76a286cb96f1b9d8cdc6"
)

from llama_index.core import PromptTemplate
'''

# Function to get financial summary using Llama Index
def get_financial_summary(llm, input):
  # Download financial data (balance sheet) using yfinance

  financial_summary = input.to_string()

  # Prompt template for summarizing financial data
  template_financial_summary = """You are a financial analyst. Your task is to provide a brief summary of the following financial data. Return a list of 5 key financial insights.\n\n{financial_summary}"""

  prompt_balance_sheet = PromptTemplate(template=template_financial_summary)

  # Use Llama Index with chosen LLM model
  result_summary = llm.complete(prompt_balance_sheet.format(financial_summary=financial_summary))

  return result_summary.text



# Function to get financial summary using Llama Index
def get_stock_prices_trend(llm, input):
  # Download financial data (balance sheet) using yfinance

  input = input.describe()
  stock_prices = input.to_string()

  # Prompt template for summarizing financial data
  template_stock_prices = """You are a financial analyst. Your task is to provide a brief summary of the trend you can obsreve.\n\n{stock_prices}"""

  prompt_stock_prices = PromptTemplate(template=template_stock_prices)

  # Use Llama Index with chosen LLM model
  result_summary = llm.complete(prompt_stock_prices.format(stock_prices=stock_prices))

  return result_summary.text



# Function to get financial summary using Llama Index
def get_stock_info_brief(llm, b):
  # Download financial data (balance sheet) using yfinance

  stock_info = str(b)

  # Prompt template for summarizing financial data
  template_stock_prices = """You are a financial analyst. Your task is to provide a brief summary of insights based based on {stock_info}.\n\n{stock_info}"""

  prompt_balance_sheet = PromptTemplate(template=template_stock_prices)

  # Use Llama Index with chosen LLM model
  result_summary = llm.complete(prompt_balance_sheet.format(stock_info=stock_info))

  return result_summary.text



# Function to get financial summary using Llama Index
def get_stock_divs_brief(llm, c):
  # Download financial data (balance sheet) using yfinance

  divs_info = c.to_string()

  # Prompt template for summarizing financial data
  template_stock_prices = """You are a financial analyst. Your task is to summarize the key insights you can derive based on {divs_info}.\n\n{divs_info}"""

  prompt_balance_sheet = PromptTemplate(template=template_stock_prices)

  # Use Llama Index with chosen LLM model
  result_summary = llm.complete(prompt_balance_sheet.format(divs_info=divs_info))

  return result_summary.text



# Function to get financial summary using Llama Index
def get_cash_flows_brief(llm, d):
  # Download financial data (balance sheet) using yfinance

  cash_flows = d.to_string()

  # Prompt template for summarizing financial data
  template_cash_flows_template = """You are a financial analyst. Your task is to summarize {cash_flows} and explain trends"""

  prompt_cash_flows = PromptTemplate(template=template_cash_flows_template)

  # Use Llama Index with chosen LLM model
  result_summary = llm.complete(prompt_cash_flows.format(cash_flows=cash_flows))

  return result_summary.text



# Function to get financial summary using Llama Index
def get_income_statement_brief(llm, f):
  # Download financial data (balance sheet) using yfinance

  divs_info = f.to_string()

  # Prompt template for summarizing financial data
  template_stock_prices = """You are a financial analyst. Your task is to summarize the key insights you can derive based on {divs_info}.\n\n{divs_info}"""

  prompt_balance_sheet = PromptTemplate(template=template_stock_prices)

  # Use Llama Index with chosen LLM model
  result_summary = llm.complete(prompt_balance_sheet.format(divs_info=divs_info))

  return result_summary.text
'''


def get_balance_sheet(symbol: str, llm = llm) -> str:
    # Fetch balance sheet from Yahoo Finance
    ticker = yf.Ticker(symbol)
    balance_sheet = ticker.balance_sheet

    # Prompt template for summarizing financial data
    template_financial_summary = """You are a financial analyst. Your task is to provide a brief summary of the following financial data concisley in less than 50 words.\n\n{balance_sheet}"""

    prompt_balance_sheet = PromptTemplate(template=template_financial_summary)

    # Use Llama Index with chosen LLM model
    result_summary = llm.complete(prompt_balance_sheet.format(balance_sheet=balance_sheet))

    return result_summary.text


print(type(get_balance_sheet('MSFT')))

def get_stock_info(symbol: str, llm = llm) -> str:
    # Fetch stock information from Yahoo Finance
    ticker = yf.Ticker(symbol)
    info = ticker.info

    stock_info = str(info)

  # Prompt template for summarizing financial data
    template_stock_prices = """You are a financial analyst. Your task is to provide a brief summary of insights based based on stock information in maximum 3 lines.\n\n{stock_info}"""

    prompt_stock_proces = PromptTemplate(template=template_stock_prices)

    # Use Llama Index with chosen LLM model
    result_summary = llm.complete(prompt_stock_proces.format(stock_info=stock_info))

    return result_summary.text

print(type(get_stock_info('MSFT')))

def get_company_info(symbol: str, save_path: Optional[str] = None, llm = llm) -> str:
    # Fetch company information from Yahoo Finance
    ticker = yf.Ticker(symbol)
    info = ticker.info
    company_info = {
        "Company Name": info.get("shortName", "N/A"),
        "Industry": info.get("industry", "N/A"),
        "Sector": info.get("sector", "N/A"),
        "Country": info.get("country", "N/A"),
        "Website": info.get("website", "N/A"),
    }
    company_info_df = DataFrame([company_info])
    if save_path:
        company_info_df.to_csv(save_path)
        print(f"Company info for {ticker.ticker} saved to {save_path}")

    company_info = str(company_info_df)

    # Prompt template for summarizing financial data
    template_company_info = """You are a financial analyst. Your task is to summarize the key insights you can derive based on content.\n\n{company_info}"""

    prompt_company_info = PromptTemplate(template=template_company_info)

    # Use Llama Index with chosen LLM model
    result_summary = llm.complete(prompt_company_info.format(company_info= company_info))

    return result_summary.text

print(type(get_company_info('MSFT')))

def get_income_stmt(symbol: str, llm = llm) -> str:
  # Fetch income statement from Yahoo Finance
    ticker = yf.Ticker(symbol)
    income_stmt = ticker.financials

    income_stmt = income_stmt.to_string()

    # Prompt template for summarizing financial data
    template_income_stmt = """You are a financial analyst. Your task is to summarize the key insights you can derive based on the following content in 3 lines.\n\n{income_stmt}"""
    prompt_income_stmt = PromptTemplate(template=template_income_stmt)
    # Use Llama Index with chosen LLM model
    result_summary = llm.complete(prompt_income_stmt.format(income_stmt= income_stmt))
    return result_summary.text

print(type(get_income_stmt('MSFT')))

def get_cash_flow(symbol: str, llm = llm) -> str:
    # Fetch cash flow from Yahoo Finance
    ticker = yf.Ticker(symbol)
    cash_flows = ticker.cashflow
    cash_flows = cash_flows.to_string()


  # Prompt template for summarizing financial data
    template_cash_flows_template = """You are a financial analyst. Your task is to summarize the key insights you can derive based on the following content.\n\n{cash_flows}"""

    prompt_cash_flows = PromptTemplate(template=template_cash_flows_template)

    # Use Llama Index with chosen LLM model
    result_summary = llm.complete(prompt_cash_flows.format(cash_flows=cash_flows))

    return result_summary.text


print(type(get_cash_flow('MSFT')))

def get_stock_dividends(symbol: str, save_path: Optional[str] = None, llm = llm) -> str:
    # Fetch stock dividends from Yahoo Finance
    ticker = yf.Ticker(symbol)
    dividends = ticker.dividends
    if save_path:
        dividends.to_csv(save_path)
        print(f"Dividends for {ticker.ticker} saved to {save_path}")

    dividends_info = dividends.to_string()

    # Prompt template for summarizing financial data
    template_dividends_info = """You are a financial analyst. Your task is to summarize the key trend you can derive based on following content in concise manner.\n\n{dividends_info}"""

    prompt_dividends_info  = PromptTemplate(template=template_dividends_info)

    # Use Llama Index with chosen LLM model
    result_summary = llm.complete(prompt_dividends_info.format(dividends_info=dividends_info))

    return result_summary.text

print(type(get_stock_dividends('MSFT')))

api_key="apik_tMzRgPeGtRkF9fSWW8vSr0baSgz6wbRU"
if api_key is None:
    raise EnvironmentError("No SUBSTRATE_API_KEY set")

from substrate import Substrate, ComputeText, sb

substrate = Substrate(api_key=api_key, timeout=60 * 5)

story = ComputeText(prompt="tell me a story",    model="Llama3Instruct8B")
summary = ComputeText(prompt=sb.concat("Summarize this story: ", story.future.text),    model="Llama3Instruct8B")
response = substrate.run(story)

story_out = response.get(story)
print(story_out.text)

# Define tools for each function
get_stock_data_tool = FunctionTool.from_defaults(fn=get_stock_data)
get_stock_info_tool = FunctionTool.from_defaults(fn=get_stock_info)
get_company_info_tool = FunctionTool.from_defaults(fn=get_company_info)
get_stock_dividends_tool = FunctionTool.from_defaults(fn=get_stock_dividends)
get_income_stmt_tool = FunctionTool.from_defaults(fn=get_income_stmt)
get_balance_sheet_tool = FunctionTool.from_defaults(fn=get_balance_sheet)
get_cash_flow_tool = FunctionTool.from_defaults(fn=get_cash_flow)
get_analyst_recommendations_tool = FunctionTool.from_defaults(fn=get_analyst_recommendations)



GPT_FINANCIAL_ANALYST_SYS_STR = react_system_header_str = """\
You are a Financial Analyst. Assist users with financial analysis, investment advice, budgeting, market analysis, and financial planning.

1) Financial Analysis: Analyze financial statements, ratios, performance.
2) Investment Analysis: Provide stock/bond insights, risk/return analysis, valuations, portfolio advice.
3) Budgeting and Forecasting: Assist with budgets, forecasting, variance analysis.
4) Market Analysis: Market research, economic trends, competitive analysis.
5) Financial Planning: Personal financial planning, debt management, goal setting.

Guidelines:
- Stick to financial analysis.
- Limit tool output to 800 tokens.
- Use appropriate financial terminology.
- Provide clear, concise, and comprehensive responses.
- Base advice on sound principles and current market conditions.
"""


prefix_msgs = [ChatMessage(role=MessageRole.SYSTEM, content=GPT_FINANCIAL_ANALYST_SYS_STR)]


aa = ReActAgent.from_tools(
    [
        get_stock_data_tool,
        get_stock_info_tool,
        get_company_info_tool,
        get_stock_dividends_tool,
        get_income_stmt_tool,
        get_balance_sheet_tool,
        get_cash_flow_tool,
        get_analyst_recommendations_tool
    ],
    llm=llm3,
    prefix_messages=prefix_msgs,
    token_counting=True,
    verbose=True,
    max_iterations=20,
)

# @markdown ---
# @markdown ### Enter a Financial Query:
query = "Should i buy the microsoft stock?"  # @param {type:"string"}
aa.reset()
response = aa.chat(query)
print(response)

